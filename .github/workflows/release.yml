name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.19'
    
    - name: Get dependencies
      run: go mod download
    
    - name: Build for all platforms
      run: |
        # Create releases directory
        mkdir -p releases
        
        # Build for Linux x86_64
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o releases/okx-tui-linux-amd64 main.go
        
        # Build for Linux ARM64
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o releases/okx-tui-linux-arm64 main.go
        
        # Build for Windows x86_64
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o releases/okx-tui-windows-amd64.exe main.go
        
        # Build for Windows ARM64
        GOOS=windows GOARCH=arm64 go build -ldflags="-s -w" -o releases/okx-tui-windows-arm64.exe main.go
        
        # Build for macOS Intel
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o releases/okx-tui-darwin-amd64 main.go
        
        # Build for macOS Apple Silicon
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o releases/okx-tui-darwin-arm64 main.go
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## OKX TUI Release
          
          ### ðŸ“¦ Downloads
          
          Choose the appropriate binary for your platform:
          
          - **Linux x86_64**: `okx-tui-linux-amd64`
          - **Linux ARM64**: `okx-tui-linux-arm64`
          - **Windows x86_64**: `okx-tui-windows-amd64.exe`
          - **Windows ARM64**: `okx-tui-windows-arm64.exe`
          - **macOS Intel**: `okx-tui-darwin-amd64`
          - **macOS Apple Silicon**: `okx-tui-darwin-arm64`
          
          ### ðŸš€ Installation
          
          1. Download the appropriate binary for your platform
          2. Make it executable (Linux/macOS): `chmod +x okx-tui-*`
          3. Run: `./okx-tui-*` (or `okx-tui-*.exe` on Windows)
          
          ### ðŸ“‹ Setup
          
          1. Copy `.env.example` to `.env`
          2. Add your OKX API credentials
          3. Run the application
        draft: false
        prerelease: false
    
    # Upload Linux x86_64
    - name: Upload Linux x86_64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./releases/okx-tui-linux-amd64
        asset_name: okx-tui-linux-amd64
        asset_content_type: application/octet-stream
    
    # Upload Linux ARM64
    - name: Upload Linux ARM64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./releases/okx-tui-linux-arm64
        asset_name: okx-tui-linux-arm64
        asset_content_type: application/octet-stream
    
    # Upload Windows x86_64
    - name: Upload Windows x86_64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./releases/okx-tui-windows-amd64.exe
        asset_name: okx-tui-windows-amd64.exe
        asset_content_type: application/octet-stream
    
    # Upload Windows ARM64
    - name: Upload Windows ARM64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./releases/okx-tui-windows-arm64.exe
        asset_name: okx-tui-windows-arm64.exe
        asset_content_type: application/octet-stream
    
    # Upload macOS Intel
    - name: Upload macOS Intel
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./releases/okx-tui-darwin-amd64
        asset_name: okx-tui-darwin-amd64
        asset_content_type: application/octet-stream
    
    # Upload macOS Apple Silicon
    - name: Upload macOS Apple Silicon
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./releases/okx-tui-darwin-arm64
        asset_name: okx-tui-darwin-arm64
        asset_content_type: application/octet-stream

    # Sync README with latest release information
    - name: Update README with latest release
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Updating README for version: $VERSION"
        
        # Create a backup of README
        cp README.md README.md.bak
        
        # Update version badge or references if they exist
        if grep -q "version-" README.md; then
          sed -i "s/version-[^-]*-/version-${VERSION#v}-/g" README.md
        fi
        
        # Update any specific version references in installation examples
        if grep -q "git checkout v" README.md; then
          sed -i "s/git checkout v[0-9.]*/git checkout $VERSION/g" README.md
        fi
        
        # Ensure the README includes the latest command-line options
        if ! grep -q "\-d.*debug" README.md; then
          echo "Adding debug flag documentation to README"
          # Add debug flag documentation after the Quick Start section
          sed -i '/### Demo Mode (No Setup Required)/a\\n#### Command Line Options\n```bash\n# Enable debug mode automatically\ngo run main.go -d\n# or\ngo run main.go -debug\n\n# Normal mode (default)\ngo run main.go\n```' README.md
        fi
        
        echo "README sync completed for release $VERSION"

    - name: Commit and push README changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        
        # Only commit if there are changes
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "docs: sync README with release ${GITHUB_REF#refs/tags/} - update documentation"
          git push origin HEAD:main
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}